# Kiara Madeam HW7
# This program will use a modified selection sort and its instruction
# count and data cache will be compared with bubble sort
# ** USE SELECTION ALGORITHM FROM HW3 & DATA FROM CLASS GITHUB BUBBLE **

.data
array:	.word		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
len:	.word		500

	.text

main:		
	lw	$t6, len
	la	$a0, array
	move	$a1, $t6
	jal	sort

	# exit program
exit:	li	$v0,	10
	syscall

###################################################
	
	# use selection sort to make array least -> greatest
sort:
	addi	$s0, $a1, -1	# $s0 -> n - 1
	li	$t0, 0		# $t0 = j
	
outer:
	beq	$t0, $s0, endSort
	move	$s1, $t0	  # j -> smallest index
	addi	$t1, $t0, 1	  # j + 1 -> i

inner:
	beq	$t1, $a1, chkSwap # if elements equal -> swap
	
	sll	$t3, $s1, 2	  # j
	sll	$t2, $t1, 2	  # i
	
	add	$t3, $t3, $a0	  # find position of i/j in array
	add	$t2, $t2, $a0
	
	lw	$t5, ($t3)	  # $t5 = array[small]
	lw	$t4, ($t2)	  # $t4 = array[i]
	
	blt	$t4, $t5, newIndex # if $t0<$t1 -> swap $t0 & $t1
	j	toInner

newIndex:
	move	$s1, $t1	# small = i

toInner:
	addi	$t1, $t1, 1	# i++
	j	inner		# -> start again at inner
	
chkSwap:
	# array[j] <-> array[small] (when array[i]<array[small])
	bne	$t0, $s1, swap
	j	toOuter
	
swap:
	sll	$t3, $s1, 2
	sll	$t2, $t0, 2
	
	add	$t3, $t3, $a0
	add	$t2, $t2, $a0

	lw	$t5, ($t3)
	lw	$t4, ($t2)
	sw	$t5, ($t2)
	sw	$t4, ($t3)

toOuter:
	addi	$t0, $t0, 1
	j	outer		# -> start again at outer

endSort:
	jr	$ra